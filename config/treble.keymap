#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        /* custom stiky key */
        // quick-release: deactivates the sticky key on the next key being pressed, as opposed to released

        sk_quickRelease: sk_quickRelease {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_QUICKRELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        /* custom mod-morph */

        mm_shift: mm_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SHIFT";
            bindings = <&sk_quickRelease LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_1_plus: mm_1_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_1_PLUS";
            bindings = <&kp N1>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_2_minus: mm_2_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_2_MINUS";
            bindings = <&kp N2>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_3_equal: mm_3_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_3_EQUAL";
            bindings = <&kp N3>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_4_percent: mm_4_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_4_PERCENT";
            bindings = <&kp N4>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_6_dot: mm_6_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_6_DOT";
            bindings = <&kp N6>, <&kp DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_7_comma: mm_7_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_7_COMMA";
            bindings = <&kp N7>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_9_star: mm_9_star {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_9_STAR";
            bindings = <&kp N9>, <&kp STAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_0_slash: mm_0_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_0_SLASH";
            bindings = <&kp N0>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_space: mm_space {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SPACE";
            bindings = <&kp SPACE>, <&mc_space>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_bspc: mm_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_BSPC";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        /* tap-dance */

        td_z: td_z {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Z";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>, <&kp LG(LS(Z))>;
        };

        td_v: td_v {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_V";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp LG(LA(V))>, <&kp LG(LA(LS(V)))>;
        };

        /* custom hold-tap */

        mt_hrmL: mt_hrmL {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 23 40 39>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        mt_hrmR: mt_hrmR {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 12 37 0>;
            hold-trigger-on-release;
        };

        lt_shift: lt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SHIFT";
            bindings = <&mo>, <&mm_shift>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_balanced: lt_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BALANCED";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        lt_space: lt_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPACE";
            bindings = <&mo>, <&mm_space>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <16 15 14 13 28 27 26 25 3 2>;
            hold-trigger-on-release;
        };

        ht_bspc: ht_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BSPC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
        };

        mm_colon: mm_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COLON";
            bindings = <&kp COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_comma: td_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&mc_space>;
        };
    };

    /* macros */

    macros {
        mc_lang: mc_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 1>,
                <&macro_press>,
                <&kp LALT &kp LCTRL>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LALT &kp LCTRL>;

            label = "MC_LANG";
        };

        mc_1: mc_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1>;
            label = "MC_1";
        };

        mc_2: mc_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2>;
            label = "MC_2";
        };

        mc_space: mc_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MC_SPACE";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
            layers = <0 3 4 7>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp ESC    &kp Q             &kp W            &kp F            &kp P              &kp G                                                               &kp J              &kp L              &kp U            &kp Y            &kp Z             &none
&mm_shift  &mt_hrmL LCTRL A  &mt_hrmL LALT R  &mt_hrmL LGUI S  &mt_hrmL LSHIFT T  &kp D                                                               &kp H              &mt_hrmR LSHIFT N  &mt_hrmR LGUI E  &mt_hrmR LALT I  &mt_hrmR LCTRL O  &mm_shift
&kp ESC    &mm_colon         &kp C            &kp X            &kp V              &kp B                                                               &kp K              &kp M              &td_comma        &kp DOT          &kp SQT           &kp BACKSPACE
                                                               &sl 3              &lt_balanced 4 ENTER  &lt_balanced 5 TAB  &lt_balanced 6 BACKSPACE  &lt_space 7 SPACE  &sl 3
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q             &kp W            &kp E            &kp R             &kp T                   &kp Y   &kp U             &kp I            &kp O            &kp P                 &trans
&trans  &mt_hrmL LCTRL A  &mt_hrmL LALT S  &mt_hrmL LGUI D  &mt_hrmL LSHFT F  &kp G                   &kp H   &mt_hrmR LSHFT J  &mt_hrmR LGUI K  &mt_hrmR LALT L  &mt_hrmR LCTRL COLON  &trans
&trans  &kp Z             &kp X            &kp C            &kp V             &kp B                   &kp N   &kp M             &kp COMMA        &kp DOT          &kp SQT               &trans
                                                            &trans            &trans  &trans  &trans  &trans  &trans
            >;
        };

        blank {
            bindings = <
&none  &none  &none  &none  &none  &none                 &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                 &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                 &none  &none  &none  &none  &none  &none
                            &none  &none  &none  &trans  &none  &none
            >;
        };

        symbol {
            bindings = <
&trans     &kp SEMI             &kp LBRC            &kp RBRC            &kp DLLR             &kp CARET                  &kp TILDE  &kp HASH              &kp STAR             &kp FSLH             &kp COLON               &trans
&kp UNDER  &mt_hrmL LCTRL BSLH  &mt_hrmL LALT LPAR  &mt_hrmL LGUI RPAR  &mt_hrmL LSHIFT DQT  &kp GRAVE                  &kp EXCL   &mt_hrmR LSHIFT PLUS  &mt_hrmR LGUI MINUS  &mt_hrmR LALT EQUAL  &mt_hrmR LCTRL PERCENT  &kp QMARK
&trans     &kp AT               &kp LBKT            &kp RBKT            &kp AMPS             &kp PIPE                   &kp LT     &kp GT                &kp COMMA            &kp DOT              &kp SQT                 &trans
                                                                        &trans               &trans     &trans  &trans  &trans     &trans
            >;
        };

        navigation {
            bindings = <
&trans  &none      &none     &none     &none      &none                   &none   &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(Z)  &trans
&trans  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none                   &none   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans  &none      &none     &none     &none      &none                   &none   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
                                       &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse {
            bindings = <
&none  &none  &none      &ht_bspc LG(BACKSPACE) BACKSPACE  &none  &none                      &none  &none  &none  &none  &none  &none
&none  &td_z  &kp LG(X)  &kp LG(C)                         &td_v  &kp LG(A)                  &none  &none  &none  &none  &none  &none
&none  &none  &none      &none                             &none  &none                      &none  &none  &none  &none  &none  &none
                                                           &none  &none      &trans  &trans  &none  &none
            >;
        };

        media {
            bindings = <
&none  &none  &none  &none  &none  &none                  &none  &none       &kp C_BRI_DN       &kp C_BRI_UP     &none       &none
&none  &none  &to 2  &to 1  &to 0  &none                  &none  &kp LEFT    &kp DOWN           &kp UP           &kp RIGHT   &none
&none  &none  &none  &none  &none  &none                  &none  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &none
                            &none  &none  &trans  &trans  &none  &none
            >;
        };

        number {
            bindings = <
&trans  &none   &kp N0  &kp N9  &none   &none                   &none   &none      &none     &none     &none      &trans
&trans  &kp N4  &kp N3  &kp N2  &kp N1  &none                   &none   &kp LSHFT  &kp LGUI  &kp LALT  &kp LCTRL  &trans
&trans  &kp N8  &kp N7  &kp N6  &kp N5  &none                   &none   &none      &trans    &trans    &none      &trans
                                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        system {
            bindings = <
&none  &none  &mc_2  &mc_1  &none  &none                &none       &none         &sys_reset    &bootloader   &none         &none
&none  &none  &none  &none  &none  &none                &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
&none  &none  &none  &none  &none  &none                &none       &none         &none         &none         &none         &none
                            &none  &none  &none  &none  &none       &none
            >;
        };

        function1 {
            bindings = <
&trans  &none   &kp F10  &kp F9  &none   &none                   &none   &none      &none     &none     &none      &trans
&trans  &kp F4  &kp F3   &kp F2  &kp F1  &none                   &none   &kp LSHFT  &kp LGUI  &kp LALT  &kp LCTRL  &trans
&trans  &kp F8  &kp F7   &kp F6  &kp F5  &none                   &none   &none      &none     &none     &none      &trans
                                 &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        function2 {
            bindings = <
&trans  &none    &kp F20  &kp F19  &none    &none                   &none   &none       &none     &none     &none      &trans
&trans  &kp F14  &kp F13  &kp F12  &kp F11  &none                   &none   &sk LSHIFT  &sk LGUI  &sk LALT  &sk LCTRL  &trans
&trans  &kp F18  &kp F17  &kp F16  &kp F15  &none                   &none   &none       &none     &none     &none      &trans
                                   &trans   &trans  &trans  &trans  &trans  &trans
            >;
        };

        numberleft {
            bindings = <
&trans  &none      &mo 3     &mo 4     &none      &none                   &none   &none       &mm_9_star   &mm_0_slash  &none          &trans
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &none                   &none   &mm_1_plus  &mm_2_minus  &mm_3_equal  &mm_4_percent  &trans
&trans  &none      &none     &none     &none      &none                   &none   &kp N5      &mm_6_dot    &mm_7_comma  &kp N8         &trans
                                       &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system {
            if-layers = <5 6>;
            then-layer = <8>;
        };
    };
};
