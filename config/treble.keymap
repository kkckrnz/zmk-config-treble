#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        /* stiky key */

        sk_quick: sk_quick {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_QUICK";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        /* mod-morph */

        mm_shiftR: mm_shiftR {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SHIFTR";
            bindings = <&sk_quick RIGHT_SHIFT>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mm_shiftL: mm_shiftL {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SHIFTL";
            bindings = <&sk_quick LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        mm_space: mm_space {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SPACE";
            bindings = <&kp SPACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        mm_bspc: mm_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_BSPC";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        mm_apos: mm_apos {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_APOS";
            bindings = <&kp APOS>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        mm_dot: mm_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_DOT";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        mm_comma: mm_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COMMA";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        mm_grave: mm_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_GRAVE";
            bindings = <&kp GRAVE>, <&mc_code>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        /* tap-dance */

        td_z: td_z {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Z";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>, <&kp LG(LS(Z))>;
        };

        td_v: td_v {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_V";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp LG(LA(V))>, <&kp LG(LA(LS(V)))>;
        };

        /* mod-tap */

        mt_baseL: mt_baseL {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_BASEL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 40 39>;
            tapping-term-ms = <240>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        mt_baseR: mt_baseR {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_BASER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 37 38>;
            hold-trigger-on-release;
        };

        mt_num: mt_num {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_NUM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <2 3 13 14 15 16 25 26 27 28 37 19 20 21 22>;
            require-prior-idle-ms = <150>;
        };

        /* layer-tap */

        lt_bal: lt_bal {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BAL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        lt_nav: lt_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NAV";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <19 20 21 22 40 32 33 34 31 7 8 9 10 20 39 30 18 6 13 14 15 16>;
            require-prior-idle-ms = <150>;
        };

        lt_num: lt_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NUM";
            bindings = <&mo>, <&mm_space>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <16 15 14 13 28 27 26 25 3 2 37 19 20 21 22>;
        };

        /* extra */

        ht_bspc: ht_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BSPC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
        };

        ht_lock: ht_lock {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LOCK";
            bindings = <&kp>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
            flavor = "tap-preferred";
        };
    };

    /* macros */

    macros {
        mc_lang: mc_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 1>,
                <&macro_press>,
                <&kp LALT &kp LCTRL>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LALT &kp LCTRL>;

            label = "MC_LANG";
        };

        mc_1: mc_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1>;
            label = "MC_1";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        mc_2: mc_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2>;
            label = "MC_2";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        mc_code: mc_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "MC_CODE";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    /* combos */

    combos {
        compatible = "zmk,combos";

        bspc {
            bindings = <&mm_bspc>;
            key-positions = <9 8>;
            layers = <0 4 7 1 3 8>;
            require-prior-idle-ms = <75>;
            timeout-ms = <40>;
            slow-release;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 2>;
            timeout-ms = <40>;
            require-prior-idle-ms = <75>;
            layers = <0 1 4 7 6>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <33 32>;
            layers = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&mc_lang    &kp Q              &kp W             &kp F             &kp P               &kp Z                                             &kp J            &kp L               &kp U             &kp Y             &mm_apos           &ht_lock LG(LC(Q)) 2
&mm_shiftR  &mt_baseL LCTRL A  &mt_baseL LALT R  &mt_baseL LGUI S  &mt_baseL LSHIFT T  &kp D                                             &kp H            &mt_baseR LSHIFT N  &mt_baseR LGUI E  &mt_baseR LALT I  &mt_baseR LCTRL O  &mm_shiftL
&none       &kp X              &kp C             &kp V             &kp G               &kp B                                             &kp K            &kp M               &mm_grave         &mm_dot           &mm_comma          &none
                                                                   &sl 3               &lt_nav 4 ENTER  &lt_bal 5 C_PLAY  &lt_bal 6 ESC  &lt_num 7 SPACE  &sl 8
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q              &kp W             &kp E             &kp R              &kp T                     &kp Y   &kp U              &kp I             &kp O             &kp P              &trans
&trans  &mt_baseL LCTRL A  &mt_baseL LALT S  &mt_baseL LGUI D  &mt_baseL LSHFT F  &kp G                     &kp H   &mt_baseR LSHFT J  &mt_baseR LGUI K  &mt_baseR LALT L  &mt_baseR LCTRL B  &trans
&trans  &kp Z              &kp X             &kp C             &kp V              &mm_apos                  &kp N   &kp M              &mm_grave         &mm_dot           &mm_comma          &trans
                                                               &trans             &trans    &trans  &trans  &trans  &trans
            >;
        };

        blank {
            bindings = <
&none  &none  &none  &none  &none  &none                &none  &none  &none  &none  &none  &trans
&none  &none  &none  &none  &none  &none                &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                &none  &none  &none  &none  &none  &none
                            &none  &none  &none  &none  &none  &none
            >;
        };

        symbolR {
            bindings = <
&trans  &none      &none     &none     &none       &none                   &kp TILDE        &kp CARET      &kp STAR   &kp FSLH   &none             &trans
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &kp LSHIFT  &none                   &kp EXCLAMATION  &kp PLUS       &kp MINUS  &kp EQUAL  &kp PERCENT       &trans
&trans  &none      &none     &none     &none       &none                   &none            &kp LESS_THAN  &kp HASH   &kp DOT    &kp GREATER_THAN  &trans
                                       &trans      &trans  &trans  &trans  &trans           &trans
            >;
        };

        navigation {
            bindings = <
&trans  &none      &none     &none     &none      &none                   &none   &kp LG(Z)  &kp LG(V)  &kp LG(C)  &kp LG(X)  &trans
&trans  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none                   &none   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans  &none      &none     &none     &none      &none                   &none   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
                                       &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
&trans  &none      &none      &ht_bspc LG(BACKSPACE) BACKSPACE  &none   &none                      &none   &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none       &trans
&trans  &kp LG(X)  &kp LG(C)  &td_v                             &td_z   &kp LG(A)                  &none   &kp LEFT    &kp DOWN              &kp UP                &kp RIGHT   &trans
&trans  &none      &none      &none                             &none   &none                      &none   &kp C_PREV  &kp C_VOL_DN          &kp C_VOLUME_UP       &kp C_NEXT  &trans
                                                                &trans  &trans     &trans  &trans  &trans  &trans
            >;
        };

        function {
            bindings = <
&trans  &kp F12  &kp F11  &kp F10  &kp F9  &none                   &none   &kp F17    &kp F18   &kp F19   &kp F20    &trans
&trans  &kp F4   &kp F3   &kp F2   &kp F1  &none                   &none   &kp LSHFT  &kp LGUI  &kp LALT  &kp LCTRL  &trans
&trans  &kp F8   &kp F7   &kp F6   &kp F5  &none                   &none   &kp F13    &kp F14   &kp F15   &kp F16    &trans
                                   &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        number {
            bindings = <
&trans  &none   &kp N0  &kp N9  &none   &none                   &none   &kp CARET           &kp STAR            &kp SLASH           &none                  &trans
&trans  &kp N4  &kp N3  &kp N2  &kp N1  &none                   &none   &mt_num LSHFT PLUS  &mt_num LGUI MINUS  &mt_num LALT EQUAL  &mt_num LCTRL PERCENT  &trans
&trans  &kp N8  &kp N7  &kp N6  &kp N5  &none                   &none   &none               &none               &trans              &trans                 &trans
                                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        symbolL {
            bindings = <
&trans  &none   &kp LBRC              &kp RBRC               &kp DOLLAR         &none                          &none   &none       &none     &none     &none      &trans
&trans  &kp AT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp AMPERSAND                  &none   &sk LSHIFT  &sk LGUI  &sk LALT  &sk LCTRL  &trans
&trans  &none   &kp LBKT              &kp RBKT               &kp BACKSLASH      &kp PIPE                       &none   &none       &none     &none     &none      &trans
                                                             &trans             &trans         &trans  &trans  &trans  &trans
            >;
        };

        system {
            bindings = <
&none  &none  &mc_2  &mc_1  &none  &none                &none       &none         &sys_reset    &bootloader   &none         &none
&none  &none  &none  &none  &none  &none                &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
&none  &none  &none  &none  &none  &none                &none       &none         &none         &none         &none         &none
                            &none  &none  &none  &none  &none       &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system {
            if-layers = <5 6>;
            then-layer = <9>;
        };
    };
};
