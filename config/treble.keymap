#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* layer-tap */
// balanced-flavour instead of tap-preferred

&lt {
    quick-tap-ms = <175>;
    flavor = "balanced";
};

/ {
    behaviors {
        /* custom stiky key */
        // quick-release: deactivates the sticky key on the next key being pressed, as opposed to released

        sk_quickRelease: sk_quickRelease {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_QUICKRELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        /* custom mod-morph */
        // single tap: left shift
        // double tap: caps word

        mm_smartShift: mm_smartShift {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SMARTSHIFT";
            bindings = <&sk_quickRelease LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 1
        // shift + tap: +

        mm_1_plus: mm_1_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_1_PLUS";
            bindings = <&kp N1>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 2
        // shift + tap: -

        mm_2_minus: mm_2_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_2_MINUS";
            bindings = <&kp N2>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 3
        // shift + tap: =

        mm_3_equal: mm_3_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_3_EQUAL";
            bindings = <&kp N3>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 4
        // shift + tap: %

        mm_4_percent: mm_4_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_4_PERCENT";
            bindings = <&kp N4>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 6
        // shift + tap: .

        mm_6_dot: mm_6_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_6_DOT";
            bindings = <&kp N6>, <&kp DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 7
        // shift + tap: ,

        mm_7_comma: mm_7_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_7_COMMA";
            bindings = <&kp N7>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 9
        // shift + tap: *

        mm_9_star: mm_9_star {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_9_STAR";
            bindings = <&kp N9>, <&kp STAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // tap        : 0
        // shift + tap: /

        mm_0_slash: mm_0_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_0_SLASH";
            bindings = <&kp N0>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        /* tap-dance */
        // single tap: backspace
        // double tap: cmd + backspace 

        td_bspc: td_bspc {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSPC";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LG(BACKSPACE)>;
        };

        // single tap: cmd + z
        // double tap: shift + cmd + z

        td_z: td_z {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Z";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>, <&kp LG(LS(Z))>;
        };

        // single tap: cmd + v
        // double tap: cmd + opt + v
        // triple tap: cmd + opt + shift + v

        td_v: td_v {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_V";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp LG(LA(V))>, <&kp LG(LA(LS(V)))>;
        };

        /* custom hold-tap */
        // hold: momentary layer
        // tap : mc_lang

        lt_lang: lt_lang {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_LANG";
            bindings = <&mo>, <&mc_lang>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        // hold: momentary layer
        // tap : sticky layer

        lt_sl: lt_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SL";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        // hold: mod
        // tap : keycode
        // for use with left side

        mt_hrmL: mt_hrmL {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 23 40 39>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        // hold: mod
        // tap : keycode
        // for use with right side

        mt_hrmR: mt_hrmR {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 12 37 38>;
            hold-trigger-on-release;
        };

        // hold: momentary layer
        // tap : mc_toggle

        lt_toggle: lt_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_TOGGLE";
            bindings = <&mo>, <&mc_toggle>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        mt_hrsL: mt_hrsL {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HRSL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 23 40 39>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        mt_hrsR: mt_hrsR {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HRSR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 12 37 38>;
            hold-trigger-on-release;
        };

        mt_shift: mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SHIFT";
            bindings = <&mo>, <&mm_smartShift>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    /* combos*/

    combos { compatible = "zmk,combos"; };

    /* macros */

    macros {
        // 1. toggle qwerty-layer
        // 2. change input source (cmd + shift + space)

        mc_lang: mc_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 1>,
                <&macro_press>,
                <&kp LALT &kp LCTRL>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LALT &kp LCTRL>;

            label = "MC_LANG";
        };

        // 1. toggle toggle-layer
        // 2. send keypress (f19), which is used to indicate toggle status on-screen

        mc_toggle: mc_toggle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 4 &kp F19>;
            label = "MC_TOGGLE";
        };

        mc_1: mc_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1>;
            label = "MC_1";
        };

        mc_2: mc_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2>;
            label = "MC_2";
        };
    };

    /* keymap */

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&lt_lang 3 0    &kp Q             &kp W            &kp F            &kp P              &kp G                                  &kp J        &kp L              &kp U            &kp Y            &kp COLON         &lt 3 BACKSPACE
&mm_smartShift  &mt_hrmL LCTRL A  &mt_hrmL LALT R  &mt_hrmL LGUI S  &mt_hrsL LSHIFT T  &kp D                                  &kp H        &mt_hrsR LSHIFT N  &mt_hrmR LGUI E  &mt_hrmR LALT I  &mt_hrmR LCTRL O  &mm_smartShift
&lt_sl 5 5      &kp Z             &kp X            &kp C            &kp V              &kp B                                  &kp K        &kp M              &kp PERIOD       &kp COMMA        &kp SQT           &lt_sl 5 5
                                                                    &lt_sl 6 6         &mt_shift 7 0  &lt 4 ESC  &lt 4 ENTER  &lt 9 SPACE  &lt_sl 8 8
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q             &kp W            &kp E            &kp R             &kp T                   &kp Y   &kp U             &kp I            &kp O            &kp P                 &trans
&trans  &mt_hrmL LCTRL A  &mt_hrmL LALT S  &mt_hrmL LGUI D  &mt_hrsL LSHFT F  &kp G                   &kp H   &mt_hrsR LSHFT J  &mt_hrmR LGUI K  &mt_hrmR LALT L  &mt_hrmR LCTRL COLON  &trans
&trans  &kp Z             &kp X            &kp C            &kp V             &kp B                   &kp N   &kp M             &kp PERIOD       &kp COMMA        &kp SQT               &trans
                                                            &trans            &trans  &trans  &trans  &trans  &trans
            >;
        };

        blank {
            bindings = <
&none  &none  &none  &none  &none  &none                &none  &none  &none  &none  &none  &mo 3
&none  &none  &none  &none  &none  &none                &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                &none  &none  &none  &none  &none  &none
                            &none  &none  &none  &none  &none  &none
            >;
        };

        system {
            bindings = <
&none  &none  &mc_2  &mc_1  &none  &none                &none       &none         &sys_reset    &bootloader   &none         &none
&none  &none  &none  &none  &to 2  &to 0                &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
&none  &none  &none  &none  &none  &none                &none       &none         &none         &none         &none         &none
                            &none  &none  &none  &none  &none       &none
            >;
        };

        toggle {
            bindings = <
&none  &none    &kp SPACE  &kp ENTER  &none    &none                              &none             &none       &kp C_BRI_DN       &kp C_BRI_UP     &none       &none
&none  &kp ESC  &kp DEL    &td_bspc   &kp TAB  &none                              &none             &kp LEFT    &kp DOWN           &kp UP           &kp RIGHT   &none
&none  &td_z    &kp LG(X)  &kp LG(C)  &td_v    &kp LG(A)                          &none             &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &none
                                      &none    &none      &mc_toggle  &mc_toggle  &kp C_PLAY_PAUSE  &none
            >;
        };

        symbol {
            bindings = <
&none      &kp SEMI             &kp LBRC            &kp RBRC            &kp DLLR             &kp CARET                  &kp TILDE  &kp HASH              &kp STAR             &kp FSLH             &kp COLON               &kp BACKSPACE
&kp UNDER  &mt_hrmL LCTRL BSLH  &mt_hrmL LALT LPAR  &mt_hrmL LGUI RPAR  &mt_hrsL LSHIFT DQT  &kp GRAVE                  &kp EXCL   &mt_hrsR LSHIFT PLUS  &mt_hrmR LGUI MINUS  &mt_hrmR LALT EQUAL  &mt_hrmR LCTRL PERCENT  &kp QMARK
&none      &kp AT               &kp LBKT            &kp RBKT            &kp AMPS             &kp PIPE                   &kp LT     &kp GT                &kp DOT              &kp COMMA            &kp SQT                 &none
                                                                        &trans               &trans     &trans  &trans  &trans     &trans
            >;
        };

        number {
            bindings = <
&none  &none      &none     &none     &none      &none                   &none   &none       &mm_9_star   &mm_0_slash  &none          &kp BACKSPACE
&none  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &mo 7                   &none   &mm_1_plus  &mm_2_minus  &mm_3_equal  &mm_4_percent  &none
&none  &none      &none     &none     &none      &none                   &none   &kp N5      &mm_6_dot    &mm_7_comma  &kp N8         &trans
                                      &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };

        navigation {
            bindings = <
&none  &none      &none     &none     &none      &none                   &none   &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(Z)  &kp BACKSPACE
&none  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none                   &none   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none
&none  &none      &none     &none     &none      &none                   &none   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
                                      &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };

        function {
            bindings = <
&kp F16  &kp F12  &kp F11  &kp F10  &kp F9  &kp F13                  &none   &none       &none     &none     &none      &none
&kp F17  &kp F4   &kp F3   &kp F2   &kp F1  &kp F14                  &none   &sk LSHIFT  &sk LGUI  &sk LALT  &sk LCTRL  &none
&kp F18  &kp F8   &kp F7   &kp F6   &kp F5  &kp F15                  &none   &none       &none     &none     &none      &none
                                    &trans  &trans   &trans  &trans  &trans  &trans
            >;
        };

        space {
            bindings = <
&none  &none  &kp A  &kp A  &none   &none                   &none   &none      &none     &none     &none      &none
&none  &kp A  &kp A  &kp A  &kp A   &none                   &none   &kp LSHFT  &kp LGUI  &kp LALT  &kp LCTRL  &none
&none  &none  &none  &none  &none   &none                   &none   &none      &none     &none     &none      &none
                            &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
