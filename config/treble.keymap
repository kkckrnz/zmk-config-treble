#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    quick-tap-ms = <175>;
    flavor = "balanced";
};

/ {
    behaviors {
        skShift: skShift {
            compatible = "zmk,behavior-sticky-key";
            label = "SKSHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        smartShift: smartShift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMARTSHIFT";
            bindings = <&skShift LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mo_lang: mo_lang {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_LANG";
            bindings = <&mo>, <&lang>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tdBSPC: tdBSPC {
            compatible = "zmk,behavior-tap-dance";
            label = "TDBSPC";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LG(BACKSPACE)>;
        };

        tdZ: tdZ {
            compatible = "zmk,behavior-tap-dance";
            label = "TDZ";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>, <&kp LG(LS(Z))>;
        };

        tdV: tdV {
            compatible = "zmk,behavior-tap-dance";
            label = "TDV";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp LG(LA(V))>, <&kp LG(LA(LS(V)))>;
        };

        mo_sl: mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_SL";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        hrmL: hrmL {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 23 40>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        hrmR: hrmR {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 12 37>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20>;
        };
    };

    macros {
        lang: lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 1 &kp LC(LS(SPACE))>;
            label = "LANG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            // | Esc   |   Q   |   W   |   E   |   R   |   T   |               |   Y   |   U   |   I   |   O   |   P   | BSPC  |
            // | Tab   |   A   |   S   |   D   |   F   |   G   |               |   H   |   J   |   K   |   L   |   ;   | Enter |
            // | Shift |   Z   |   X   |   C   |   V   |   B   |               |   N   |   M   |   ,   |   .   |   /   | Shift |
            //                                 | Ctrl  |  Cmd  |  Alt  |  L-1  |  spc  |  L-2  |

            bindings = <
&mo_lang 2 0  &kp Q          &kp W         &kp F         &kp P           &kp G                      &kp J        &kp L           &kp U         &kp Y         &kp COLON      &none
&smartShift   &hrmL LCTRL A  &hrmL LALT R  &hrmL LGUI S  &hrmL LSHIFT T  &kp D                      &kp M        &hrmR LSHIFT N  &hrmR LGUI E  &hrmR LALT I  &hrmR LCTRL O  &smartShift
&tog 3        &kp Z          &kp X         &kp C         &kp V           &kp B                      &kp K        &kp H           &kp PERIOD    &kp COMMA     &kp SQT        &tog 3
                                                         &mo_sl 4 4      &lt 5 ENTER  &none  &none  &lt 8 SPACE  &mo_sl 4 4
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q  &kp W  &kp E  &kp R   &kp T                   &kp Y   &kp U   &kp I       &kp O      &kp P      &trans
&trans  &kp A  &kp S  &kp D  &kp F   &kp G                   &kp H   &kp J   &kp K       &kp L      &kp COLON  &trans
&trans  &kp Z  &kp X  &kp C  &kp V   &kp B                   &kp N   &kp M   &kp PERIOD  &kp COMMA  &kp SQT    &trans
                             &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        system {
            // | BTCLR |  BT1  |  BT2  |  BT3  |  BT4  |  BT5  |               |       |       |       |       |       |       |
            // |       |       |       |       |       |       |               |       |       |       |       |       |       |
            // |       |       |       |       |       |       |               |       |       |       |       |       |       |
            //                                 |       |       |       |       |       |       |

            bindings = <
&none  &none  &none  &none  &none  &none                &none       &none         &sys_reset    &bootloader   &none         &none
&none  &none  &none  &none  &none  &none                &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
&none  &none  &none  &none  &none  &none                &none       &none         &none         &none         &none         &none
                            &none  &none  &none  &none  &none       &none
            >;
        };

        oneHanded {
            bindings = <
&none   &none    &kp SPACE  &kp RET    &none    &none                    &none             &none       &kp C_BRI_DN       &kp C_BRI_UP     &none       &none
&none   &kp ESC  &kp TAB    &tdBSPC    &kp DEL  &none                    &none             &kp LEFT    &kp DOWN           &kp UP           &kp RIGHT   &none
&trans  &tdZ     &kp LG(X)  &kp LG(C)  &tdV     &kp LG(A)                &none             &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &trans
                                       &none    &none      &none  &none  &kp C_PLAY_PAUSE  &none
            >;
        };

        symbol {
            bindings = <
&none      &kp SEMI          &kp LBRC         &kp RBRC         &kp DLLR          &kp CARET                  &kp TILDE  &kp HASH           &kp STAR          &kp FSLH          &kp COLON            &none
&kp UNDER  &hrmL LCTRL BSLH  &hrmL LALT LPAR  &hrmL LGUI RPAR  &hrmL LSHIFT DQT  &kp GRAVE                  &kp EXCL   &hrmR LSHIFT PLUS  &hrmR LGUI MINUS  &hrmR LALT EQUAL  &hrmR LCTRL PERCENT  &kp QMARK
&none      &kp AT            &kp LBKT         &kp RBKT         &kp AMPS          &kp PIPE                   &kp LT     &kp GT             &kp DOT           &kp COMMA         &kp SQT              &none
                                                               &trans            &trans     &trans  &trans  &trans     &trans
            >;
        };

        navigation {
            // |   `   |   1   |   2   |   3   |   4   |   5   |               |       |       |       |       |       |       |
            // |   '   |   6   |   7   |   8   |   9   |   0   |               |       | Left  | Down  |  Up   | Right |       |
            // |       |   \   |   -   |   =   |   [   |   ]   |               |       | Home  | PG DN | PG UP | End   |       |
            //                                 |       |       |       |       |       |       |

            bindings = <
&none  &none      &none     &none     &none      &none                   &none   &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(Z)  &none
&none  &kp LSHFT  &kp LALT  &kp LGUI  &kp LCTRL  &none                   &none   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none
&none  &none      &none     &none     &none      &none                   &none   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &none
                                      &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };

        number {
            bindings = <
&trans  &none      &none     &none     &none      &none                   &kp STAR  &kp N4  &kp N5  &kp N6  &kp SLASH  &trans
&trans  &kp LSHFT  &kp LALT  &kp LGUI  &kp LCTRL  &none                   &kp PLUS  &kp N1  &kp N2  &kp N3  &kp MINUS  &trans
&trans  &none      &none     &none     &none      &none                   &kp DOT   &kp N7  &kp N8  &kp N9  &kp N0     &trans
                                       &trans     &trans  &trans  &trans  &trans    &trans
            >;
        };

        function {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        space {
            bindings = <
&none  &none    &kp SPACE  &kp RET   &none    &none                   &none   &none      &none     &none     &none      &none
&none  &kp ESC  &kp TAB    &kp BSPC  &kp DEL  &none                   &none   &kp LSHFT  &kp LGUI  &kp LALT  &kp LCTRL  &none
&none  &none    &none      &none     &none    &none                   &none   &none      &none     &none     &none      &none
                                     &trans   &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
